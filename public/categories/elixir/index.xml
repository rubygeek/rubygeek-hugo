<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>elixir on </title>
    <link>/categories/elixir/</link>
    <description>Recent content in elixir on </description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Tue, 26 Dec 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/categories/elixir/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Data Structures in Clojure And Elixir: Structs and Records</title>
      <link>/post/2017-12-26-data-structures-in-clojure-and-elixir-structs-records/</link>
      <pubDate>Tue, 26 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/2017-12-26-data-structures-in-clojure-and-elixir-structs-records/</guid>
      <description>Both Elixir and Clojure have a way to make a more &amp;ldquo;organized&amp;rdquo; entity, like a map but more structure. Elixir can easily have default values whereas with Clojure, it is not built in but you can create a helper functions to set some default values and create a record.
Elixir A defstruct takes on the name of the defmodule it is in:
iex(1)&amp;gt; defmodule User do ...(1)&amp;gt; defstruct name: &amp;#34;&amp;#34;, state: &amp;#34;&amp;#34;, color: &amp;#34;green&amp;#34;, size: &amp;#34;M&amp;#34; .</description>
    </item>
    
    <item>
      <title>Data Structures in Clojure and Elixir: Maps</title>
      <link>/post/2017-12-21-data-structures-in-clojure-and-elixir-maps/</link>
      <pubDate>Thu, 21 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/2017-12-21-data-structures-in-clojure-and-elixir-maps/</guid>
      <description>Elixir Tuples used { } .. but maps use %{ }. You can use anything for a key.. here are string keys:
iex(1)&amp;gt; data = %{&amp;#34;name&amp;#34; =&amp;gt; &amp;#34;nola&amp;#34;, &amp;#34;color&amp;#34; =&amp;gt; &amp;#34;red&amp;#34;} %{&amp;#34;color&amp;#34; =&amp;gt; &amp;#34;red&amp;#34;, &amp;#34;name&amp;#34; =&amp;gt; &amp;#34;nola&amp;#34;} iex(4)&amp;gt; data[&amp;#34;name&amp;#34;] &amp;#34;nola&amp;#34; If you use a string to set the value, obviously you need to use that to get the value.
Using atoms for keys is alot nicer for maps, the syntax is shorter and you can use .</description>
    </item>
    
    <item>
      <title>Data Structures in Clojure and Elixir:  Sets</title>
      <link>/post/2017-12-17-data-structures-in-clojure-and-elixir-sets/</link>
      <pubDate>Sun, 17 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/2017-12-17-data-structures-in-clojure-and-elixir-sets/</guid>
      <description>My last post talked about Lists, Tuples and Vectors comparing Elixir and Clojure &amp;hellip; now lets cover a related topic.. sets.
When you think of set, think of Math Sets.
Elixir There are two ways to create a Set in Elixir
Using the Pipe Operator and put:
set = MapSet.new |&amp;gt; MapSet.put(&amp;#34;apple&amp;#34;) |&amp;gt; MapSet.put(&amp;#34;apple&amp;#34;) |&amp;gt; MapSet.put(&amp;#34;banana&amp;#34;) #MapSet&amp;lt;[&amp;#34;apple&amp;#34;, &amp;#34;banana&amp;#34;]&amp;gt; Or use a List and pass that to MapSet.new
iex(1)&amp;gt; set = MapSet.</description>
    </item>
    
    <item>
      <title>Data Structures in Clojure and Elixir: Lists, Tuples, Vectors</title>
      <link>/post/2017-12-13-data-structures-in-clojure-and-elixir-lists-tuples-vectors/</link>
      <pubDate>Wed, 13 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/2017-12-13-data-structures-in-clojure-and-elixir-lists-tuples-vectors/</guid>
      <description>In my free time I&#39;ve been learning more Elixir, and I&#39;ve already been doing Clojure for awhile now. I am going to write this blog post to compare/contrast the data structures available in both languages as well as a few functions you can use. Just for fun and so I can keep it in my head.
List / Vector This is aslso known as an array in some languages. This is a collection of items, in which case order is generally depended on to access items.</description>
    </item>
    
  </channel>
</rss>