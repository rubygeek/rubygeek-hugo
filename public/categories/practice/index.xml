<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>practice on </title>
    <link>/categories/practice/</link>
    <description>Recent content in practice on </description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 09 Mar 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/categories/practice/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Contributing to Open Source</title>
      <link>/post/2018-03-09-contributing-to-open-source/</link>
      <pubDate>Fri, 09 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018-03-09-contributing-to-open-source/</guid>
      <description>You probably use open source software if you are programmer and you know you should probably at some point give back right? I&#39;ve been programming since I was a kid and working as a professional programmer for 17 years (at the time of this post). I freaking love code but I wouldn&#39;t say I&#39;ve contributed a lot in the past years. :(
I want to talk about some of my experiences and what you can do to get started.</description>
    </item>
    
    <item>
      <title>Coding on Car Trips</title>
      <link>/post/2017-06-04-coding-on-car-trips/</link>
      <pubDate>Sun, 04 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/2017-06-04-coding-on-car-trips/</guid>
      <description>I have a big family scattered through the United States, so we do road trips. My husband drives while I code :) On my last road trip I wrote these notes:
Bring some things to do that don&#39;t require wifi. If you have a codeschool account, download some of the videos to watch. You may not have the bandwidth to do the exercises and play along but you can at least watch the videos.</description>
    </item>
    
    <item>
      <title>Using lein-try to learn Prismatic Schema</title>
      <link>/post/2015-04-18-using-lein-try-to-learn-prismatic-schema/</link>
      <pubDate>Sat, 18 Apr 2015 15:13:10 +0000</pubDate>
      
      <guid>/post/2015-04-18-using-lein-try-to-learn-prismatic-schema/</guid>
      <description>When I first heard of lein-try on the Cognitect Podcast (and then again in the Clojure Cookbook I thought wow! How cool is that! I tried it with following the example in the readme clj-time to get familar with using it.
First add lein-try to your ~/.lein/profiles plugins vector, run lein deps to get it installed.
{:user {:plugins [lein-try &amp;#34;0.4.3&amp;#34;]}} I wanted to understand Prismatic’s Schema and wanted to try it.</description>
    </item>
    
    <item>
      <title>Getting Better at Practice</title>
      <link>/post/2013-10-13-getting-better-at-practice/</link>
      <pubDate>Sun, 13 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>/post/2013-10-13-getting-better-at-practice/</guid>
      <description>It often surprising to me to find developers who don&#39;t spend time improving their craft. In reading the book The Clean Coder: A Code of Conduct for Professional Programmers by Uncle Bob It states:
 Practicing is what you do when you aren&#39;t getting paid. You do it so you will be paid, and paid well.
 To put it another way, do you really want a doctor who only uses what he knows from 2005 when he graduated from medical school?</description>
    </item>
    
    <item>
      <title>Exploring Arrays - Part 3</title>
      <link>/post/2013-04-27-exploring-arrays-part-3/</link>
      <pubDate>Sat, 27 Apr 2013 00:00:00 +0000</pubDate>
      
      <guid>/post/2013-04-27-exploring-arrays-part-3/</guid>
      <description>Continuing going through the array methods, using Ruby 1.9.3
Element Reference ary[index] → obj or nil ary[start, length] → new_ary or nil ary[range] → new_ary or nil slice(index) → obj or nil slice(start, length) → new_ary or nil slice(range) → new_ary or nil Ok, so we&#39;ve got the &amp;ldquo;normal&amp;rdquo; way to access an array element, simply using the name of the array, [ index ]. If item is not found at index it returns nil.</description>
    </item>
    
    <item>
      <title>Reading Books Cover-to-Cover</title>
      <link>/post/2013-01-13-reading-books-cover-to-cover/</link>
      <pubDate>Sun, 13 Jan 2013 00:00:00 +0000</pubDate>
      
      <guid>/post/2013-01-13-reading-books-cover-to-cover/</guid>
      <description>I wanted to buy &amp;ldquo;Practical Object-Orientated Design in Ruby&amp;rdquo; by Sandi Metz when it first came out, and I had a hard time justifying it because there are many books I have bought and have not read all the way through. So I thought I&#39;d do an experiment in reading a tech book cover-to-cover and then I&#39;ll buy &amp;ldquo;poodr&amp;rdquo;. So my first cover-to-cover read was Eloquent Ruby by Russ Olsen. Not all books should be read cover-to-cover but when you read a book cover-to-cover you&#39;ll discover a few things:</description>
    </item>
    
    <item>
      <title>Better code through Code Reviews</title>
      <link>/post/2012-10-16-better-code-through-code-reviews/</link>
      <pubDate>Tue, 16 Oct 2012 00:00:00 +0000</pubDate>
      
      <guid>/post/2012-10-16-better-code-through-code-reviews/</guid>
      <description>For one of my projects we have started doing code reviews. We use github, work in a branch, then submit a pull request for review. Looking at github you can see a nice diff of the changes and you are able to add comments. So github is one way. You could also just use
git diff master..myawesomebranch And get a decent diff.
I prefer to code review live if the other person is available in person (screensharing would work too).</description>
    </item>
    
    <item>
      <title>Playing with RubyKoans</title>
      <link>/post/2012-09-06-playing-with-rubykoans/</link>
      <pubDate>Thu, 06 Sep 2012 00:00:00 +0000</pubDate>
      
      <guid>/post/2012-09-06-playing-with-rubykoans/</guid>
      <description>&lt;p&gt;From time to time I run through the rubykoans&amp;hellip;each time remembering or picking up something new. I&#39;m such a dork, I keep a log of the dates in a spreadsheet. I first did these in Dec 2009, then again in July 2010, May 2011 and now I am going through them again. I remember the first time I did a few, I was amazed &amp;ldquo;how did they do that!?!?!&amp;rdquo; and dug through the source to see how it works. I immediately emailed Joe O&#39;Brien and Jim Weirich at &lt;a href=&#34;http://www.edgecase.com&#34;&gt;edgecase.com&lt;/a&gt; and thanked them! Joe thanked me for my kind words and Jim said they were inspired by the book Little Lisper.&lt;/p&gt;
&lt;p&gt;When I first did these in 2009, it was a github repo that you cloned. Now you can go to &lt;a href=&#34;http://www.rubykoans.com&#34;&gt;www.rubykoans.com&lt;/a&gt; and download a zipfile or work on them through the browser! Few months ago I was bored with no real computer, so I attempted the browser based koans on my Samsung Tablet. It was kinda hard to do the special symbols so I don&#39;t really recommend doing it on a tablet unless you merely wanted to kill time like I did. :)&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Practicing Ruby with RailsCasts</title>
      <link>/post/2011-07-10-practicing-ruby-with-railscasts/</link>
      <pubDate>Sun, 10 Jul 2011 00:00:00 +0000</pubDate>
      
      <guid>/post/2011-07-10-practicing-ruby-with-railscasts/</guid>
      <description>&lt;p&gt;I recently went on a small vacation and finally had some time to catch up on some &lt;a href=&#34;http://www.railscasts.com&#34;&gt;RailsCasts&lt;/a&gt;! I like to setup a project and &amp;ldquo;play along&amp;rdquo; with Ryan Bates and pause/play and work through the examples. With all my experimentation/playing I keep a git repo at &lt;a href=&#34;http://github.com/rubygeek/rubygeek&#34;&gt;http://github.com/rubygeek/rubygeek&lt;/a&gt; where I keep code for reference later. Sometimes when trying to remember if i did something, I grep a keyword or two on the root directory and see if I have done something with it before. I can put notes in the readme file for each project, so I can remember what resources I used.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.railscasts.com/episodes/264-guard&#34;&gt;Guard&lt;/a&gt;
Setups up monitoring for files to run something like tests, compile coffee script or sass. The cast shows how to use it to run your rspec tests. It shows liverefresh, with that and a plugin it will automatically refresh your browser!&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.railscasts.com/episodes/262-trees-with-ancestry&#34;&gt;Ancestory&lt;/a&gt;
I spent a good deal of time using acts_as_commentable_with_threading and although its pretty good, I think now I will change to using this, it seems like it will be more efficent on queries and has more scopes defined.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Koan-A-Copia!</title>
      <link>/post/2011-01-22-koan-a-copia/</link>
      <pubDate>Sat, 22 Jan 2011 00:00:00 +0000</pubDate>
      
      <guid>/post/2011-01-22-koan-a-copia/</guid>
      <description>&lt;p&gt;I first learned about Koans from EdgeCase Ruby Koans project, it was great fun and great practice. Since then, whenever I mentored a DevChix or RailsMentors member I suggest to start doing Koans&amp;hellip; even on a regular basis, once you finish them all &amp;hellip; then start over! I always have a ruby koan mid-way and work on it when I want to practice ruby. Sometimes I try to complete the whole file then run it. Since I’ve been learning Groovy this week, I looked to see if there was Groovy Koans, found those.. then I just started compiling all the languages I know of..&lt;/p&gt;
&lt;h3 id=&#34;ruby&#34;&gt;Ruby&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://www.rubykoans.com&#34;&gt;http://www.rubykoans.com&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;python&#34;&gt;Python&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/gregmalcolm/python_koans&#34;&gt;https://github.com/gregmalcolm/python_koans&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>How to get better at programming?</title>
      <link>/post/2009-09-08-how-to-get-better-at-programming/</link>
      <pubDate>Tue, 08 Sep 2009 00:00:00 +0000</pubDate>
      
      <guid>/post/2009-09-08-how-to-get-better-at-programming/</guid>
      <description>Sometime ago a co-worker asked me what my github name was. I had forgotten..I hadn&#39;t used it in so long! He was surprised that I didn&#39;t have any open source code out there! I said, umm..I haven&#39;t written anything I think someone would want!
I tend to start projects, work a bit on them and leave them. I find something new and exciting. I get busy with school, work, and life.</description>
    </item>
    
  </channel>
</rss>