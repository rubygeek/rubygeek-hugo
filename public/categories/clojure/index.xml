<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>clojure on </title>
    <link>/categories/clojure/</link>
    <description>Recent content in clojure on </description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Wed, 17 Jan 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/categories/clojure/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Cool Things In Clojure 1.9</title>
      <link>/post/2018-01-17-cool-things-in-clojure-1-dot-9/</link>
      <pubDate>Wed, 17 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018-01-17-cool-things-in-clojure-1-dot-9/</guid>
      <description>I was glad to see Clojure 1.9 out because of Spec and some more things. But, was sad, because I can no longer say &amp;ldquo;Hey! I have a commit in the latest version of clojure!&amp;quot;. Course, that just gives me some motivation to find ways to help out in .. Clojure 2.0 ?? OMG. I don&#39;t like to brag, but it was fun when this guy in my community (mostly he didn&#39;t do Clojure) when he heard I had a patch in 1.</description>
    </item>
    
    <item>
      <title>One-Liners in Clojure and Ruby</title>
      <link>/post/2018-01-03-one-liners-clojure-ruby/</link>
      <pubDate>Wed, 03 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018-01-03-one-liners-clojure-ruby/</guid>
      <description>A quick post to start off the new year.
You and your co-workers can&#39;t decide where to go for lunch?
▶ ruby -e &amp;#34;puts [:tacos, :chicken, :bbq].sample&amp;#34; chicken ▶ clj -e &amp;#34;(rand-nth [:tacos :chicken :bbq])&amp;#34; :tacos Observations:
Ruby I had to tell it what to do with the output, to puts it. It didn&#39;t automatically display like if I had done that line in the irb repl. Oh and don&#39;t do what I did at first and forget the , (comma) :)</description>
    </item>
    
    <item>
      <title>Getting Started with Clojure is now easier than ever - On a Mac</title>
      <link>/post/2017-12-27-getting-started-with-clojure-is-now-easier-than-ever-mac/</link>
      <pubDate>Wed, 27 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/2017-12-27-getting-started-with-clojure-is-now-easier-than-ever-mac/</guid>
      <description>As of Dec 8, 2017 a brew recipe has been added to install Clojure with brew install clojure and it gives you commands clj and clojure.
To try it out, I created a file, test.clj with the following:
#!/usr/bin/env clojure (println &amp;#34;Hello World&amp;#34;) (println (+ 1 2 3 4 5)) (println (clojure.string/upper-case &amp;#34;hello world&amp;#34;)) After you make it executable with:
chmod u+x test.clj You can execute it:
▶ ./test.clj Hello World 15 HELLO WORLD A popular way to play with Clojure is to use a repl.</description>
    </item>
    
    <item>
      <title>Data Structures in Clojure And Elixir: Structs and Records</title>
      <link>/post/2017-12-26-data-structures-in-clojure-and-elixir-structs-records/</link>
      <pubDate>Tue, 26 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/2017-12-26-data-structures-in-clojure-and-elixir-structs-records/</guid>
      <description>Both Elixir and Clojure have a way to make a more &amp;ldquo;organized&amp;rdquo; entity, like a map but more structure. Elixir can easily have default values whereas with Clojure, it is not built in but you can create a helper functions to set some default values and create a record.
Elixir A defstruct takes on the name of the defmodule it is in:
iex(1)&amp;gt; defmodule User do ...(1)&amp;gt; defstruct name: &amp;#34;&amp;#34;, state: &amp;#34;&amp;#34;, color: &amp;#34;green&amp;#34;, size: &amp;#34;M&amp;#34; .</description>
    </item>
    
    <item>
      <title>Data Structures in Clojure and Elixir: Maps</title>
      <link>/post/2017-12-21-data-structures-in-clojure-and-elixir-maps/</link>
      <pubDate>Thu, 21 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/2017-12-21-data-structures-in-clojure-and-elixir-maps/</guid>
      <description>Elixir Tuples used { } .. but maps use %{ }. You can use anything for a key.. here are string keys:
iex(1)&amp;gt; data = %{&amp;#34;name&amp;#34; =&amp;gt; &amp;#34;nola&amp;#34;, &amp;#34;color&amp;#34; =&amp;gt; &amp;#34;red&amp;#34;} %{&amp;#34;color&amp;#34; =&amp;gt; &amp;#34;red&amp;#34;, &amp;#34;name&amp;#34; =&amp;gt; &amp;#34;nola&amp;#34;} iex(4)&amp;gt; data[&amp;#34;name&amp;#34;] &amp;#34;nola&amp;#34; If you use a string to set the value, obviously you need to use that to get the value.
Using atoms for keys is alot nicer for maps, the syntax is shorter and you can use .</description>
    </item>
    
    <item>
      <title>Data Structures in Clojure and Elixir:  Sets</title>
      <link>/post/2017-12-17-data-structures-in-clojure-and-elixir-sets/</link>
      <pubDate>Sun, 17 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/2017-12-17-data-structures-in-clojure-and-elixir-sets/</guid>
      <description>My last post talked about Lists, Tuples and Vectors comparing Elixir and Clojure &amp;hellip; now lets cover a related topic.. sets.
When you think of set, think of Math Sets.
Elixir There are two ways to create a Set in Elixir
Using the Pipe Operator and put:
set = MapSet.new |&amp;gt; MapSet.put(&amp;#34;apple&amp;#34;) |&amp;gt; MapSet.put(&amp;#34;apple&amp;#34;) |&amp;gt; MapSet.put(&amp;#34;banana&amp;#34;) #MapSet&amp;lt;[&amp;#34;apple&amp;#34;, &amp;#34;banana&amp;#34;]&amp;gt; Or use a List and pass that to MapSet.new
iex(1)&amp;gt; set = MapSet.</description>
    </item>
    
    <item>
      <title>Data Structures in Clojure and Elixir: Lists, Tuples, Vectors</title>
      <link>/post/2017-12-13-data-structures-in-clojure-and-elixir-lists-tuples-vectors/</link>
      <pubDate>Wed, 13 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/2017-12-13-data-structures-in-clojure-and-elixir-lists-tuples-vectors/</guid>
      <description>In my free time I&#39;ve been learning more Elixir, and I&#39;ve already been doing Clojure for awhile now. I am going to write this blog post to compare/contrast the data structures available in both languages as well as a few functions you can use. Just for fun and so I can keep it in my head.
List / Vector This is aslso known as an array in some languages. This is a collection of items, in which case order is generally depended on to access items.</description>
    </item>
    
    <item>
      <title>Records in Clojure</title>
      <link>/post/2016-03-13-records-in-clojure/</link>
      <pubDate>Sun, 13 Mar 2016 08:22:44 +0000</pubDate>
      
      <guid>/post/2016-03-13-records-in-clojure/</guid>
      <description>I haven&#39;t used records before in a project and when reading some code that used it, realize I really need to learn about records. It&#39;s not complicated and actually kind of cool! Here&#39;s my experimentation.
To start off, I re-read the first chapter in ClojureApplied where it talks about Modeling your Entities.
I took a familar problem, my recipe-api. This is a recipe api that uses liberator api reading recipes from a database.</description>
    </item>
    
    <item>
      <title>Two Cool Tools for Clojure Development</title>
      <link>/post/2015-12-12-two-cool-tools-for-clojure-development/</link>
      <pubDate>Sat, 12 Dec 2015 14:43:49 +0000</pubDate>
      
      <guid>/post/2015-12-12-two-cool-tools-for-clojure-development/</guid>
      <description>I&#39;ve recently used a couple tools that I want to write about because I think they are pretty useful.
1. Eastwood Eastwood is a linter, which will check your syntax to see if it is valid. BTW I have actually made this mistake for real! The github page lists all the things it checks for and a lot of how to configure eastwood.
To get started, Install into your lein profiles.</description>
    </item>
    
    <item>
      <title>Book Review - Clojure Applied</title>
      <link>/post/2015-08-30-book-review-clojure-applied/</link>
      <pubDate>Sun, 30 Aug 2015 21:12:57 +0000</pubDate>
      
      <guid>/post/2015-08-30-book-review-clojure-applied/</guid>
      <description>Clojure Applied &amp;ndash; Written by Alex Miller and Ben Vangrift.
I am a junkie for books and Clojure books are no exception. I have been doing Clojure since Jan 2014 and feel like I kinda got the hang of it but now what? When I saw Clojure Applied &amp;ldquo;From Practice to Practitioner&amp;rdquo; was being written I kept a close eye on Pragmatic Programmer&#39;s coming soon list and an eye on twitter.</description>
    </item>
    
    <item>
      <title>Simple API Backend for Development with Atoms</title>
      <link>/post/2015-06-27-simple-api-backend-for-development-with-atoms/</link>
      <pubDate>Sat, 27 Jun 2015 20:52:27 +0000</pubDate>
      
      <guid>/post/2015-06-27-simple-api-backend-for-development-with-atoms/</guid>
      <description>When playing with liberator I wished I had a simple way to skip over having a database for playing around with data and I also wanted to write about Liberator but not have to get bogged down with Database stuff. I wrote a simple API backend that uses atoms and I&#39;ll write about this first, and this will be followed with some posts on liberator and what is the simplest setup and gradually building on.</description>
    </item>
    
    <item>
      <title>Using lein-try to learn Prismatic Schema</title>
      <link>/post/2015-04-18-using-lein-try-to-learn-prismatic-schema/</link>
      <pubDate>Sat, 18 Apr 2015 15:13:10 +0000</pubDate>
      
      <guid>/post/2015-04-18-using-lein-try-to-learn-prismatic-schema/</guid>
      <description>When I first heard of lein-try on the Cognitect Podcast (and then again in the Clojure Cookbook I thought wow! How cool is that! I tried it with following the example in the readme clj-time to get familar with using it.
First add lein-try to your ~/.lein/profiles plugins vector, run lein deps to get it installed.
{:user {:plugins [lein-try &amp;#34;0.4.3&amp;#34;]}} I wanted to understand Prismatic’s Schema and wanted to try it.</description>
    </item>
    
  </channel>
</rss>