<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on </title>
    <link>/post/</link>
    <description>Recent content in Posts on </description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sun, 22 Jul 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Automation - What to test?</title>
      <link>/post/2018-07-22-browser-automation-what-to-test/</link>
      <pubDate>Sun, 22 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018-07-22-browser-automation-what-to-test/</guid>
      <description>Recently I&#39;ve been working with a QA team and I&#39;ve learned how to test the browser from them and have came up with some of my own ideas learning from Trial and Error. I have spent close to 1.5 years doing Automation Testing whereas previously I&#39;ve always been a test obsessed developer with little in the way of browser testing.
This post is focusing on testing the browser and automating the tests.</description>
    </item>
    
    <item>
      <title>My Robot Framework Setup</title>
      <link>/post/2018-07-05-my-robot-framework-setup/</link>
      <pubDate>Thu, 05 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018-07-05-my-robot-framework-setup/</guid>
      <description>I&#39;ve been using Robot Framework for a little over a year now. I have a handful of commits between Robot Framework (RF) and the RF Selenium Library and I&#39;m active in the Robot Slack Group. It is a really nifty test automation framework.
This is a little bit about how my tests are arranged and how I setup a new project.
Sample structure:
├── README.md └── suites ├── api │ ├── api_common.</description>
    </item>
    
    <item>
      <title>Setting Up Jenkins For Robot Framework</title>
      <link>/post/2018-04-09-setting-up-jenkins-for-robot-framework/</link>
      <pubDate>Mon, 09 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018-04-09-setting-up-jenkins-for-robot-framework/</guid>
      <description>Robot framework is a test automation framework. There are many uses for it, but I use it for selenium web testing. But no matter what you test you can use it for many things.
Jenkins a tool to manage &amp;ldquo;jobs&amp;rdquo;, segments of work that you might use &amp;ldquo;cron&amp;rdquo; for.
I use it to run robot framework tests nightly or every 6 hours, or whatever you need.
Jenkins is breeze to set up (at least on mac) and once installed search in the plugins for the robot framework plugin.</description>
    </item>
    
    <item>
      <title>Contributing to Open Source</title>
      <link>/post/2018-03-09-contributing-to-open-source/</link>
      <pubDate>Fri, 09 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018-03-09-contributing-to-open-source/</guid>
      <description>You probably use open source software if you are programmer and you know you should probably at some point give back right? I&#39;ve been programming since I was a kid and working as a professional programmer for 17 years (at the time of this post). I freaking love code but I wouldn&#39;t say I&#39;ve contributed a lot in the past years. :(
I want to talk about some of my experiences and what you can do to get started.</description>
    </item>
    
    <item>
      <title>Cool Things In Clojure 1.9</title>
      <link>/post/2018-01-17-cool-things-in-clojure-1-dot-9/</link>
      <pubDate>Wed, 17 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018-01-17-cool-things-in-clojure-1-dot-9/</guid>
      <description>I was glad to see Clojure 1.9 out because of Spec and some more things. But, was sad, because I can no longer say &amp;ldquo;Hey! I have a commit in the latest version of clojure!&amp;quot;. Course, that just gives me some motivation to find ways to help out in .. Clojure 2.0 ?? OMG. I don&#39;t like to brag, but it was fun when this guy in my community (mostly he didn&#39;t do Clojure) when he heard I had a patch in 1.</description>
    </item>
    
    <item>
      <title>One-Liners in Clojure and Ruby</title>
      <link>/post/2018-01-03-one-liners-clojure-ruby/</link>
      <pubDate>Wed, 03 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018-01-03-one-liners-clojure-ruby/</guid>
      <description>A quick post to start off the new year.
You and your co-workers can&#39;t decide where to go for lunch?
▶ ruby -e &amp;#34;puts [:tacos, :chicken, :bbq].sample&amp;#34; chicken ▶ clj -e &amp;#34;(rand-nth [:tacos :chicken :bbq])&amp;#34; :tacos Observations:
Ruby I had to tell it what to do with the output, to puts it. It didn&#39;t automatically display like if I had done that line in the irb repl. Oh and don&#39;t do what I did at first and forget the , (comma) :)</description>
    </item>
    
    <item>
      <title>Getting Started with Clojure is now easier than ever - On a Mac</title>
      <link>/post/2017-12-27-getting-started-with-clojure-is-now-easier-than-ever-mac/</link>
      <pubDate>Wed, 27 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/2017-12-27-getting-started-with-clojure-is-now-easier-than-ever-mac/</guid>
      <description>As of Dec 8, 2017 a brew recipe has been added to install Clojure with brew install clojure and it gives you commands clj and clojure.
To try it out, I created a file, test.clj with the following:
#!/usr/bin/env clojure (println &amp;#34;Hello World&amp;#34;) (println (+ 1 2 3 4 5)) (println (clojure.string/upper-case &amp;#34;hello world&amp;#34;)) After you make it executable with:
chmod u+x test.clj You can execute it:
▶ ./test.clj Hello World 15 HELLO WORLD A popular way to play with Clojure is to use a repl.</description>
    </item>
    
    <item>
      <title>Data Structures in Clojure And Elixir: Structs and Records</title>
      <link>/post/2017-12-26-data-structures-in-clojure-and-elixir-structs-records/</link>
      <pubDate>Tue, 26 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/2017-12-26-data-structures-in-clojure-and-elixir-structs-records/</guid>
      <description>Both Elixir and Clojure have a way to make a more &amp;ldquo;organized&amp;rdquo; entity, like a map but more structure. Elixir can easily have default values whereas with Clojure, it is not built in but you can create a helper functions to set some default values and create a record.
Elixir A defstruct takes on the name of the defmodule it is in:
iex(1)&amp;gt; defmodule User do ...(1)&amp;gt; defstruct name: &amp;#34;&amp;#34;, state: &amp;#34;&amp;#34;, color: &amp;#34;green&amp;#34;, size: &amp;#34;M&amp;#34; .</description>
    </item>
    
    <item>
      <title>Data Structures in Clojure and Elixir: Maps</title>
      <link>/post/2017-12-21-data-structures-in-clojure-and-elixir-maps/</link>
      <pubDate>Thu, 21 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/2017-12-21-data-structures-in-clojure-and-elixir-maps/</guid>
      <description>Elixir Tuples used { } .. but maps use %{ }. You can use anything for a key.. here are string keys:
iex(1)&amp;gt; data = %{&amp;#34;name&amp;#34; =&amp;gt; &amp;#34;nola&amp;#34;, &amp;#34;color&amp;#34; =&amp;gt; &amp;#34;red&amp;#34;} %{&amp;#34;color&amp;#34; =&amp;gt; &amp;#34;red&amp;#34;, &amp;#34;name&amp;#34; =&amp;gt; &amp;#34;nola&amp;#34;} iex(4)&amp;gt; data[&amp;#34;name&amp;#34;] &amp;#34;nola&amp;#34; If you use a string to set the value, obviously you need to use that to get the value.
Using atoms for keys is alot nicer for maps, the syntax is shorter and you can use .</description>
    </item>
    
    <item>
      <title>Data Structures in Clojure and Elixir:  Sets</title>
      <link>/post/2017-12-17-data-structures-in-clojure-and-elixir-sets/</link>
      <pubDate>Sun, 17 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/2017-12-17-data-structures-in-clojure-and-elixir-sets/</guid>
      <description>My last post talked about Lists, Tuples and Vectors comparing Elixir and Clojure &amp;hellip; now lets cover a related topic.. sets.
When you think of set, think of Math Sets.
Elixir There are two ways to create a Set in Elixir
Using the Pipe Operator and put:
set = MapSet.new |&amp;gt; MapSet.put(&amp;#34;apple&amp;#34;) |&amp;gt; MapSet.put(&amp;#34;apple&amp;#34;) |&amp;gt; MapSet.put(&amp;#34;banana&amp;#34;) #MapSet&amp;lt;[&amp;#34;apple&amp;#34;, &amp;#34;banana&amp;#34;]&amp;gt; Or use a List and pass that to MapSet.new
iex(1)&amp;gt; set = MapSet.</description>
    </item>
    
    <item>
      <title>Data Structures in Clojure and Elixir: Lists, Tuples, Vectors</title>
      <link>/post/2017-12-13-data-structures-in-clojure-and-elixir-lists-tuples-vectors/</link>
      <pubDate>Wed, 13 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/2017-12-13-data-structures-in-clojure-and-elixir-lists-tuples-vectors/</guid>
      <description>In my free time I&#39;ve been learning more Elixir, and I&#39;ve already been doing Clojure for awhile now. I am going to write this blog post to compare/contrast the data structures available in both languages as well as a few functions you can use. Just for fun and so I can keep it in my head.
List / Vector This is aslso known as an array in some languages. This is a collection of items, in which case order is generally depended on to access items.</description>
    </item>
    
    <item>
      <title>Managing My Tasks</title>
      <link>/post/2017-12-10-managing-my-tasks/</link>
      <pubDate>Sun, 10 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/2017-12-10-managing-my-tasks/</guid>
      <description>Some one asked me how I manage my tasks and I showed him but I thought it would make for a good blog post. I&#39;m not saying I am the perfect solution but this is what works for me.
For long term storage of projects, tasks and ideas I use Omnifocus. I have used it for 7 years. I initially got a free copy of the Mac app because I know someone who works there but since then I&#39;ve paid for updates and bought it for iPhone and iPad.</description>
    </item>
    
    <item>
      <title>What I Wished I knew</title>
      <link>/post/2017-06-11-what-i-wished-i-knew/</link>
      <pubDate>Sun, 11 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/2017-06-11-what-i-wished-i-knew/</guid>
      <description>A few things I wish I knew when I started my career as a software developer.
Go to User Groups! I was working for 2-3 years before I got the courage to go to my first user group. Now I currently run one, and have in the past run more than one. Get out there and meet people, if it is a long commute to the meeting or you have little kids at home (often an excuse/reason I hear) then maybe only go every 2-3 months.</description>
    </item>
    
    <item>
      <title>Interview Prep</title>
      <link>/post/2017-06-06-interview-prep/</link>
      <pubDate>Tue, 06 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/2017-06-06-interview-prep/</guid>
      <description>I recently went through this process so I thought it would be good to share what I think are good things to do to prepare for an interview.
Logistics Arrive early, sit in your car or outside and walk in 15 mins before (I&#39;m kind of paranoid, so I get there 30 mins before usually). Ask me about a job I didn&#39;t get (years ago) because I was late. Hey, I had a good reason, they changed the time on me and mentioned it an attachment (not the body of the email) that I didn&#39;t notice was there.</description>
    </item>
    
    <item>
      <title>Coding on Car Trips</title>
      <link>/post/2017-06-04-coding-on-car-trips/</link>
      <pubDate>Sun, 04 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/2017-06-04-coding-on-car-trips/</guid>
      <description>I have a big family scattered through the United States, so we do road trips. My husband drives while I code :) On my last road trip I wrote these notes:
Bring some things to do that don&#39;t require wifi. If you have a codeschool account, download some of the videos to watch. You may not have the bandwidth to do the exercises and play along but you can at least watch the videos.</description>
    </item>
    
    <item>
      <title>Tagging in Robot Framework</title>
      <link>/post/2017-05-23-tagging-in-robot-framework/</link>
      <pubDate>Tue, 23 May 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/2017-05-23-tagging-in-robot-framework/</guid>
      <description>I talked about the awesome robot framework in the previous post and I wanted to talk about Tagging since I think this is very useful.
Tagging is one way to group tests so you run a subset of tests. In your test case, add this:
Homepage Loads [Tags] smoke Open Homepage Element Should Be Visible ${FIND_LOGO} [Teardown] Close Browser Results to run just one tag:
▶ robot --include smoke youtube.robot ============================================================================== Youtube :: A test to demo testing YouTube ============================================================================== Homepage Loads | PASS | ------------------------------------------------------------------------------ Search Loads Results | PASS | ------------------------------------------------------------------------------ Youtube :: A test to demo testing YouTube | PASS | 2 critical tests, 2 passed, 0 failed 2 tests total, 2 passed, 0 failed ============================================================================== You can create a focus so it is easy to run that one test as you are developing it.</description>
    </item>
    
    <item>
      <title>Automation Testing with Robot Framework</title>
      <link>/post/2017-05-21-automation-testing-with-robot-framework/</link>
      <pubDate>Sun, 21 May 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/2017-05-21-automation-testing-with-robot-framework/</guid>
      <description>On one of my projects recently, I was tasked with finding an automation framework. Looking at my options..
 Cucumber (ruby, although other languages could be used) Capybara / Rspec (ruby) Robot Framework (python)  All of the options for web testing use either Selenium or Watir. I have only did a little with Watir, so I focused on something with Selenium for my first pass of experimentation.
I love testing if you know anything about me, I&#39;m nuts about testing.</description>
    </item>
    
    <item>
      <title>My Favorite Tech Podcasts</title>
      <link>/post/2017-05-14-my-favorite-tech-podcasts/</link>
      <pubDate>Sun, 14 May 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/2017-05-14-my-favorite-tech-podcasts/</guid>
      <description>I saw someone asking about tech podcasts recently and I named off a few, but I think it is easier to put it in a blog post :) Ordered in roughly the order I am into at the moment :)
General Tech  The Changelog - open source discussions, interviews with a wide varity of languages DotNetRocks - You might think it is all about .NET but it is not, they cover a wide variety of topics.</description>
    </item>
    
    <item>
      <title>using jshint</title>
      <link>/post/2017-03-16-using-jshint/</link>
      <pubDate>Thu, 16 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/2017-03-16-using-jshint/</guid>
      <description>Javascript. It&#39;s a language that some of us love to hate, me occasionally. Here&#39;s a few notes to myself to make JS a little better :)
Use these settings in JSHint to avoid instanity:
file: .jshintrc { &amp;quot;flagname&amp;quot; : true } If you have settings that apply to only your test environment you can put those in test/.jshintrc (maybe allowing global var for your test function) .. you can extend a confiuration in another file with this option `&amp;quot;extends&amp;rdquo; : &amp;ldquo;.</description>
    </item>
    
    <item>
      <title>Ruby like Python</title>
      <link>/post/2017-03-10-ruby-like-python/</link>
      <pubDate>Fri, 10 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/2017-03-10-ruby-like-python/</guid>
      <description>I did python.. awhile back, it was like ruby in some ways and in some ways not. So I picked one, I went full blown into Ruby. Recently I&#39;ve seen lots of job postings for Python so I figured I&#39;d give it another go :)
Slicing In Python:
&amp;gt;&amp;gt;&amp;gt; message = &amp;#34;hello world&amp;#34; &amp;gt;&amp;gt;&amp;gt; message[0:5] &amp;#39;hello&amp;#39; &amp;gt;&amp;gt;&amp;gt; message[6:] &amp;#39;world&amp;#39; Then in ruby
2.4.0 :001 &amp;gt; message = &amp;#34;hello world&amp;#34; =&amp;gt; &amp;#34;hello world&amp;#34; 2.</description>
    </item>
    
    <item>
      <title>Setting up a new Ruby or Rails Project</title>
      <link>/post/2017-02-04-setting-up-new-ruby-project/</link>
      <pubDate>Sat, 04 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/2017-02-04-setting-up-new-ruby-project/</guid>
      <description>A checklist to follow when starting a new project if you are using rbenv or rvm:
Make sure this is in your .bashrc or .zshrc
alias be=&amp;quot;bundle exec&amp;quot; Then any time you would need bundle exec you can just use be. Or alternatively, Hal Fulton pointed out you can do bundle exec bash to get a bash shell that would be the same as using be each time :)
 Create a directory for your project and change into it.</description>
    </item>
    
    <item>
      <title>Records in Clojure</title>
      <link>/post/2016-03-13-records-in-clojure/</link>
      <pubDate>Sun, 13 Mar 2016 08:22:44 +0000</pubDate>
      
      <guid>/post/2016-03-13-records-in-clojure/</guid>
      <description>I haven&#39;t used records before in a project and when reading some code that used it, realize I really need to learn about records. It&#39;s not complicated and actually kind of cool! Here&#39;s my experimentation.
To start off, I re-read the first chapter in ClojureApplied where it talks about Modeling your Entities.
I took a familar problem, my recipe-api. This is a recipe api that uses liberator api reading recipes from a database.</description>
    </item>
    
    <item>
      <title>Two Cool Tools for Clojure Development</title>
      <link>/post/2015-12-12-two-cool-tools-for-clojure-development/</link>
      <pubDate>Sat, 12 Dec 2015 14:43:49 +0000</pubDate>
      
      <guid>/post/2015-12-12-two-cool-tools-for-clojure-development/</guid>
      <description>I&#39;ve recently used a couple tools that I want to write about because I think they are pretty useful.
1. Eastwood Eastwood is a linter, which will check your syntax to see if it is valid. BTW I have actually made this mistake for real! The github page lists all the things it checks for and a lot of how to configure eastwood.
To get started, Install into your lein profiles.</description>
    </item>
    
    <item>
      <title>Book Review - Clojure Applied</title>
      <link>/post/2015-08-30-book-review-clojure-applied/</link>
      <pubDate>Sun, 30 Aug 2015 21:12:57 +0000</pubDate>
      
      <guid>/post/2015-08-30-book-review-clojure-applied/</guid>
      <description>Clojure Applied &amp;ndash; Written by Alex Miller and Ben Vangrift.
I am a junkie for books and Clojure books are no exception. I have been doing Clojure since Jan 2014 and feel like I kinda got the hang of it but now what? When I saw Clojure Applied &amp;ldquo;From Practice to Practitioner&amp;rdquo; was being written I kept a close eye on Pragmatic Programmer&#39;s coming soon list and an eye on twitter.</description>
    </item>
    
    <item>
      <title>Enumerable: any?</title>
      <link>/post/2015-08-02-enumerable-got-any/</link>
      <pubDate>Sun, 02 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>/post/2015-08-02-enumerable-got-any/</guid>
      <description>This is about the handy any? method in Enumerable
The documentation says
class Taco attr_accessor :meat def initialize(meat) @meat = meat end def beef? @meat == :beef end def chicken? @meat == :chicken end end Lets test it out
irb(main):018:0&amp;gt; taco = Taco.new(:beef) =&amp;gt; #&amp;lt;Taco:0x007fa374070278 @meat=:beef&amp;gt; irb(main)&amp;gt; taco.beef? =&amp;gt; true irb(main)&amp;gt; taco.chicken? =&amp;gt; false Lets create two instances
tacos = [] tacos.push(Taco.new(:beef)) tacos.push(Taco.new(:chicken)) Now since the array has enumerable and we made some handy methods to test the meat of our tacos we can easily check our array to see if we have any chicken tacos:</description>
    </item>
    
    <item>
      <title>Simple API Backend for Development with Atoms</title>
      <link>/post/2015-06-27-simple-api-backend-for-development-with-atoms/</link>
      <pubDate>Sat, 27 Jun 2015 20:52:27 +0000</pubDate>
      
      <guid>/post/2015-06-27-simple-api-backend-for-development-with-atoms/</guid>
      <description>When playing with liberator I wished I had a simple way to skip over having a database for playing around with data and I also wanted to write about Liberator but not have to get bogged down with Database stuff. I wrote a simple API backend that uses atoms and I&#39;ll write about this first, and this will be followed with some posts on liberator and what is the simplest setup and gradually building on.</description>
    </item>
    
    <item>
      <title>Exploring Arrays Part 6</title>
      <link>/post/2015-06-06-exploring-arrays-part-6/</link>
      <pubDate>Sat, 06 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>/post/2015-06-06-exploring-arrays-part-6/</guid>
      <description>Continuing on through the array methods&amp;hellip; now using ruby 2.2.0preview1 :)
eql? eql?(other) → true or false Returns true if self and other are the same object, or are both arrays with the same content (according to Object#eql?).  Lets try it on structs first. A struct is an easy way to make an object in ruby. First I define a struct of a User with two attributes:
irb(main):001:0&amp;gt; User = Struct.</description>
    </item>
    
    <item>
      <title>Using lein-try to learn Prismatic Schema</title>
      <link>/post/2015-04-18-using-lein-try-to-learn-prismatic-schema/</link>
      <pubDate>Sat, 18 Apr 2015 15:13:10 +0000</pubDate>
      
      <guid>/post/2015-04-18-using-lein-try-to-learn-prismatic-schema/</guid>
      <description>When I first heard of lein-try on the Cognitect Podcast (and then again in the Clojure Cookbook I thought wow! How cool is that! I tried it with following the example in the readme clj-time to get familar with using it.
First add lein-try to your ~/.lein/profiles plugins vector, run lein deps to get it installed.
{:user {:plugins [lein-try &amp;#34;0.4.3&amp;#34;]}} I wanted to understand Prismatic’s Schema and wanted to try it.</description>
    </item>
    
    <item>
      <title>Testing routes with RSpec and Minitest</title>
      <link>/post/2014-10-06-testing-routes-with-rspec-and-minitest/</link>
      <pubDate>Mon, 06 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>/post/2014-10-06-testing-routes-with-rspec-and-minitest/</guid>
      <description>The poor often forgotten routes folder in your tests or specs folder (if you even have one!). People don&#39;t know what goes in them or how to write them. I like to write them because they are pretty easy to write and often a great first-step when it comes to a legacy codebase.
It gives you the chance to get a good look at that routes file and see if there are routes there you really don&#39;t need?</description>
    </item>
    
    <item>
      <title>Leveling up on Rspec</title>
      <link>/post/2014-09-19-leveling-up-on-rspec/</link>
      <pubDate>Fri, 19 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>/post/2014-09-19-leveling-up-on-rspec/</guid>
      <description>The other day I saw there was a Rspec option in .rspec I didn&#39;t know about and I thought what else do I not know about Rspec? I set myself to dig around in the command line options and source code to see if I could figure out anything else cool. Here are a few of the things I&#39;ve learned:
Require all the time This is what triggered my curiosity, finding this in .</description>
    </item>
    
    <item>
      <title>Exploring Arrays Part 5</title>
      <link>/post/2014-08-28-exploring-arrays-part-5/</link>
      <pubDate>Thu, 28 Aug 2014 00:00:00 +0000</pubDate>
      
      <guid>/post/2014-08-28-exploring-arrays-part-5/</guid>
      <description>BTW Going to use Ruby 2.1.2 from here on out
Yes, it has been awhile but (who has time to dwell on the past?) I haven&#39;t forgotten I was going through each array class! My last post said next was delete, so let&#39;s get to it!
delete delete(obj) → item or nil delete(obj) { block } → item or result of block  Ok first one looks pretty straight forward, it returns item if it found it and nil if it doesn&#39;t.</description>
    </item>
    
    <item>
      <title>Book Review:  Application Testing with Capybara</title>
      <link>/post/2014-03-09-book-review-application-testing-with-capybara/</link>
      <pubDate>Sun, 09 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>/post/2014-03-09-book-review-application-testing-with-capybara/</guid>
      <description>If you know me, you know I love testing. Model tests, library tests (typically when poro objects) are the most awesome to test and I love it. Controller tests, well, are less fun and testing routes is not bad either. But my least favorite are integration tests.
Cucumber tests seemed awesome in theory and I remember early days in Chicago ruby group there was development on rspec story runner which I believed was written by Dan North, later rewritten as Cucumber.</description>
    </item>
    
    <item>
      <title>Getting Better at Practice</title>
      <link>/post/2013-10-13-getting-better-at-practice/</link>
      <pubDate>Sun, 13 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>/post/2013-10-13-getting-better-at-practice/</guid>
      <description>It often surprising to me to find developers who don&#39;t spend time improving their craft. In reading the book The Clean Coder: A Code of Conduct for Professional Programmers by Uncle Bob It states:
 Practicing is what you do when you aren&#39;t getting paid. You do it so you will be paid, and paid well.
 To put it another way, do you really want a doctor who only uses what he knows from 2005 when he graduated from medical school?</description>
    </item>
    
    <item>
      <title>Exploring Arrays - Part 4</title>
      <link>/post/2013-09-02-exploring-arrays-part-4/</link>
      <pubDate>Mon, 02 Sep 2013 00:00:00 +0000</pubDate>
      
      <guid>/post/2013-09-02-exploring-arrays-part-4/</guid>
      <description>combination combination(n) { |c| block } → ary combination(n) → an_enumerator  Next method up for discussion is combination, when I saw this my first thought was &amp;ldquo;OH wow!! I can make games!!&amp;quot;. Being able to generate datasets I think is key to making a game. Being able to make a list of combinations, then pick on at random I think is cool. Lets try it
&amp;gt;&amp;gt; bad_guys = [:ogre, :giant, :zombie] =&amp;gt; [:ogre, :giant, :zombie] &amp;gt;&amp;gt; bad_guys.</description>
    </item>
    
    <item>
      <title>Exploring Arrays - Part 3</title>
      <link>/post/2013-04-27-exploring-arrays-part-3/</link>
      <pubDate>Sat, 27 Apr 2013 00:00:00 +0000</pubDate>
      
      <guid>/post/2013-04-27-exploring-arrays-part-3/</guid>
      <description>Continuing going through the array methods, using Ruby 1.9.3
Element Reference ary[index] → obj or nil ary[start, length] → new_ary or nil ary[range] → new_ary or nil slice(index) → obj or nil slice(start, length) → new_ary or nil slice(range) → new_ary or nil Ok, so we&#39;ve got the &amp;ldquo;normal&amp;rdquo; way to access an array element, simply using the name of the array, [ index ]. If item is not found at index it returns nil.</description>
    </item>
    
    <item>
      <title>Exploring Arrays - Part 2</title>
      <link>/post/2013-03-11-exploring-arrays-part-2/</link>
      <pubDate>Mon, 11 Mar 2013 00:00:00 +0000</pubDate>
      
      <guid>/post/2013-03-11-exploring-arrays-part-2/</guid>
      <description>My second blog post on the topic. Between the writings of this post and part 1 Ruby 2.0 was released on its 20th birthday! But I am going to stick with Ruby 1.9.3 for this series, maybe after I am done I&#39;ll see what changed for 2.0
Array Documentation http://ruby-doc.org/core-1.9.3/Array.html
BTW, to make an array you can use the %w and space separated list of values, I will use that here to save on typing.</description>
    </item>
    
    <item>
      <title>Exploring Arrays - Part 1</title>
      <link>/post/2013-02-23-exploring-arrays-part-1/</link>
      <pubDate>Sat, 23 Feb 2013 00:00:00 +0000</pubDate>
      
      <guid>/post/2013-02-23-exploring-arrays-part-1/</guid>
      <description>Everytime that I have to lookup something with hashes or arrays, I find lots of methods that I didn&#39;t know about, so I thought I&#39;d do an experiment where I will learn about each one and write some examples and try to understand how to use it. I kind of picture someone sitting next to me as I do this, reading the docs and trying them out with me.
Ruby 1.</description>
    </item>
    
    <item>
      <title>Reading Books Cover-to-Cover</title>
      <link>/post/2013-01-13-reading-books-cover-to-cover/</link>
      <pubDate>Sun, 13 Jan 2013 00:00:00 +0000</pubDate>
      
      <guid>/post/2013-01-13-reading-books-cover-to-cover/</guid>
      <description>I wanted to buy &amp;ldquo;Practical Object-Orientated Design in Ruby&amp;rdquo; by Sandi Metz when it first came out, and I had a hard time justifying it because there are many books I have bought and have not read all the way through. So I thought I&#39;d do an experiment in reading a tech book cover-to-cover and then I&#39;ll buy &amp;ldquo;poodr&amp;rdquo;. So my first cover-to-cover read was Eloquent Ruby by Russ Olsen. Not all books should be read cover-to-cover but when you read a book cover-to-cover you&#39;ll discover a few things:</description>
    </item>
    
    <item>
      <title>Simple Breadcrumbs</title>
      <link>/post/2012-11-20-simple-breadcrumbs/</link>
      <pubDate>Tue, 20 Nov 2012 00:00:00 +0000</pubDate>
      
      <guid>/post/2012-11-20-simple-breadcrumbs/</guid>
      <description>I needed a simple breadcrumb module/class that would let me set the first crumb and add to it later. I looked at www.ruby-toolbox.com and saw a bunch, none of them looked simple enough for me. I already had a template so I dont care about changing that&amp;hellip;so I whipped up my own breadcrumbs:
class Breadcrumb Crumb = Struct.new(:name, :link) attr_reader :crumbs def initialize(name = &amp;#34;Home&amp;#34;, link = &amp;#34;/&amp;#34;) @crumbs = [] self.</description>
    </item>
    
    <item>
      <title>Using ActiveModel to Validate Input</title>
      <link>/post/2012-10-17-using-active-model-to-validate-input/</link>
      <pubDate>Wed, 17 Oct 2012 00:00:00 +0000</pubDate>
      
      <guid>/post/2012-10-17-using-active-model-to-validate-input/</guid>
      <description>The other day I was working a project where I had to validate some input before running a query:
Say I have a database of friends and their address, and I want to find all friends with at least 3 letters of the name and an optional zipcode. The controller looks like this:
def index @name = clean_name(params[:name]) @zip = params[:zip] if @name.present? &amp;amp;&amp;amp; @name.size &amp;gt; 2 if @zip.present? &amp;amp;&amp;amp; @zip.</description>
    </item>
    
    <item>
      <title>Better code through Code Reviews</title>
      <link>/post/2012-10-16-better-code-through-code-reviews/</link>
      <pubDate>Tue, 16 Oct 2012 00:00:00 +0000</pubDate>
      
      <guid>/post/2012-10-16-better-code-through-code-reviews/</guid>
      <description>For one of my projects we have started doing code reviews. We use github, work in a branch, then submit a pull request for review. Looking at github you can see a nice diff of the changes and you are able to add comments. So github is one way. You could also just use
git diff master..myawesomebranch And get a decent diff.
I prefer to code review live if the other person is available in person (screensharing would work too).</description>
    </item>
    
    <item>
      <title>Caps in Ruby are Constants</title>
      <link>/post/2012-09-13-caps-in-ruby-are-constants/</link>
      <pubDate>Thu, 13 Sep 2012 00:00:00 +0000</pubDate>
      
      <guid>/post/2012-09-13-caps-in-ruby-are-constants/</guid>
      <description>&lt;p&gt;Everything in Ruby that starts with a capital letter is a constant, meaning you can&#39;t change its value. That means:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;API_USER&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;API_PASSWORD&lt;/span&gt; 

&lt;span style=&#34;color:#66d9ef&#34;&gt;Talk&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Are constants, here they are as you normally might see them:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;API_USER&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;devuser&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;API_PASSWORD&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;h1%3am1&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;Class&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Talk&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;ActiveRecord&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Base&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I&#39;ve seen people use  const_get(&amp;ldquo;string&amp;rdquo;) to get the objectived (yes I make up my own words, I don&#39;t know what you would call this? perhaps constantized? keep reading) of a string like:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; t &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Object&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;const_get(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Talk&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Talk&lt;/span&gt;(id: integer, &lt;span style=&#34;color:#e6db74&#34;&gt;conference_id&lt;/span&gt;: integer, &lt;span style=&#34;color:#e6db74&#34;&gt;person_id&lt;/span&gt;: integer, &lt;span style=&#34;color:#e6db74&#34;&gt;title&lt;/span&gt;: string, &lt;span style=&#34;color:#e6db74&#34;&gt;description&lt;/span&gt;: text, &lt;span style=&#34;color:#e6db74&#34;&gt;slides_url&lt;/span&gt;: string, &lt;span style=&#34;color:#e6db74&#34;&gt;video_url&lt;/span&gt;: string, &lt;span style=&#34;color:#e6db74&#34;&gt;start_time&lt;/span&gt;: datetime, &lt;span style=&#34;color:#e6db74&#34;&gt;end_time&lt;/span&gt;: datetime, &lt;span style=&#34;color:#e6db74&#34;&gt;created_at&lt;/span&gt;: datetime, &lt;span style=&#34;color:#e6db74&#34;&gt;updated_at&lt;/span&gt;: datetime)
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; intro_talk &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; t&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new(&lt;span style=&#34;color:#e6db74&#34;&gt;title&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Intro to Rails&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)

t&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ancestors&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Talk&lt;/span&gt;(id: integer, &lt;span style=&#34;color:#e6db74&#34;&gt;conference_id&lt;/span&gt;: integer, &lt;span style=&#34;color:#e6db74&#34;&gt;person_id&lt;/span&gt;: integer, &lt;span style=&#34;color:#e6db74&#34;&gt;title&lt;/span&gt;: string, &lt;span style=&#34;color:#e6db74&#34;&gt;description&lt;/span&gt;: text, &lt;span style=&#34;color:#e6db74&#34;&gt;slides_url&lt;/span&gt;: string, &lt;span style=&#34;color:#e6db74&#34;&gt;video_url&lt;/span&gt;: string, &lt;span style=&#34;color:#e6db74&#34;&gt;start_time&lt;/span&gt;: datetime, &lt;span style=&#34;color:#e6db74&#34;&gt;end_time&lt;/span&gt;: datetime, &lt;span style=&#34;color:#e6db74&#34;&gt;created_at&lt;/span&gt;: datetime, &lt;span style=&#34;color:#e6db74&#34;&gt;updated_at&lt;/span&gt;: datetime)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Crazy, huh? We look up the constant &amp;ldquo;Talk&amp;rdquo; (a subclass of ActiveRecord) and assign it to &amp;lsquo;t&amp;rsquo; and use that to instantiate a new record. I don&#39;t know why you&#39;d do this, but this is what it&#39;s doing and since today I learned that any uppercased ruby identifier is an constant that all makes perfect sense. We can look at the first ancestors and see its ancestor is Talk.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Playing with RubyKoans</title>
      <link>/post/2012-09-06-playing-with-rubykoans/</link>
      <pubDate>Thu, 06 Sep 2012 00:00:00 +0000</pubDate>
      
      <guid>/post/2012-09-06-playing-with-rubykoans/</guid>
      <description>&lt;p&gt;From time to time I run through the rubykoans&amp;hellip;each time remembering or picking up something new. I&#39;m such a dork, I keep a log of the dates in a spreadsheet. I first did these in Dec 2009, then again in July 2010, May 2011 and now I am going through them again. I remember the first time I did a few, I was amazed &amp;ldquo;how did they do that!?!?!&amp;rdquo; and dug through the source to see how it works. I immediately emailed Joe O&#39;Brien and Jim Weirich at &lt;a href=&#34;http://www.edgecase.com&#34;&gt;edgecase.com&lt;/a&gt; and thanked them! Joe thanked me for my kind words and Jim said they were inspired by the book Little Lisper.&lt;/p&gt;
&lt;p&gt;When I first did these in 2009, it was a github repo that you cloned. Now you can go to &lt;a href=&#34;http://www.rubykoans.com&#34;&gt;www.rubykoans.com&lt;/a&gt; and download a zipfile or work on them through the browser! Few months ago I was bored with no real computer, so I attempted the browser based koans on my Samsung Tablet. It was kinda hard to do the special symbols so I don&#39;t really recommend doing it on a tablet unless you merely wanted to kill time like I did. :)&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Trying out Emberjs Models and views</title>
      <link>/post/2012-09-03-trying-out-emberjs/</link>
      <pubDate>Mon, 03 Sep 2012 00:00:00 +0000</pubDate>
      
      <guid>/post/2012-09-03-trying-out-emberjs/</guid>
      <description>&lt;p&gt;I&#39;ve read about emberjs and I&#39;ve tried &lt;a href=&#34;http://www.codeschool.com/courses/anatomy-of-backbonejs&#34;&gt;CodeSchool Backbone&lt;/a&gt; and the concepts are interesting, I like the concept of a model updating some text on the screen without having to write $(&#39;#myelement&amp;rsquo;).text(&amp;lsquo;updated content&amp;rsquo;) and a friend was mentioning how much they like the emberjs models. So, I wanted to try and in a way I could only worry about a few pieces (that router and junk still kinda makes me crazy for frontend since I do that on the back end.. maybe I just need to do more). I was reading the &lt;a href=&#34;http://emberjs.com/documentation/&#34;&gt;Ember Documentation&lt;/a&gt; and they have some small examples that inspired me. So I set out to try somethings:&lt;/p&gt;
&lt;p&gt;I downloaded the &lt;a href=&#34;https://github.com/downloads/emberjs/starter-kit/starter-kit.1.0.pre.zip&#34;&gt;Starter Kit&lt;/a&gt; from &lt;a href=&#34;http://www.emberjs.com&#34;&gt;emberjs.com&lt;/a&gt; and it had a skeleton index and app.js file ready to go. Nice. I first played around with making a model and calling a method on it.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Digging through sludge</title>
      <link>/post/2012-08-28-digging-through-sludge/</link>
      <pubDate>Tue, 28 Aug 2012 00:00:00 +0000</pubDate>
      
      <guid>/post/2012-08-28-digging-through-sludge/</guid>
      <description>###Or how to dive into a large untested project and be productive
This is how I feel sometimes when I come upon a large untested project:
I&#39;ve been talking to folks and pondering this question..how to be effective (in a new to me) large untested project? I was listening to RubyRogues and they mentioned this talk at Cascadia Ruby (I immedately recognize the name as one of the devchix and they praised her talk Therapeutic Refactoring.</description>
    </item>
    
    <item>
      <title>Screen Multiplexing == Productivity</title>
      <link>/post/2012-02-26-screen-multiplexing-productivity/</link>
      <pubDate>Sun, 26 Feb 2012 00:00:00 +0000</pubDate>
      
      <guid>/post/2012-02-26-screen-multiplexing-productivity/</guid>
      <description>&lt;p&gt;A few friends have been telling me about tmux and since I&#39;ve been using a mac full time again (rather than ssh into linux) I haven&#39;t used a screen multiplexer. I wrote awhile back about &lt;!-- raw HTML omitted --&gt;Getting around with GNU Screen&lt;!-- raw HTML omitted --&gt; and I really liked screen. I was listening to Changelog&#39;s podcast &lt;!-- raw HTML omitted --&gt;Episode 0.7.3 - Tmux with Brian Hogan and Josh Clayton&lt;!-- raw HTML omitted --&gt; on one of my walks, it seemed useful and better than screen. Then I remembered hey it was kind of useful to use a screen multiplexer (BTW, I love saying multiplexer. I feel smart, like I know what I am talking about, hehe). I got home from my walk and installed it and started with the links on the changelog show notes and not wanting to get overwhemed by just copying someone conf file, I started simple and added a few things:&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Adding an application config file to a rails project</title>
      <link>/post/2011-07-16-adding-an-application-config-file-to-a-rails-project/</link>
      <pubDate>Sat, 16 Jul 2011 00:00:00 +0000</pubDate>
      
      <guid>/post/2011-07-16-adding-an-application-config-file-to-a-rails-project/</guid>
      <description>&lt;p&gt;Recently I worked on a project where I needed certain config variables for staging, production, test etc and I wanted to store all these in a yaml file. I could set them in the different environments files but I prefer them all in one file.&lt;/p&gt;
&lt;p&gt;Create a file in the config/initializers .. I called it 00_load_app_config.rb so I can be sure it gets loaded first. In it I have only a single line&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Practicing Ruby with RailsCasts</title>
      <link>/post/2011-07-10-practicing-ruby-with-railscasts/</link>
      <pubDate>Sun, 10 Jul 2011 00:00:00 +0000</pubDate>
      
      <guid>/post/2011-07-10-practicing-ruby-with-railscasts/</guid>
      <description>&lt;p&gt;I recently went on a small vacation and finally had some time to catch up on some &lt;a href=&#34;http://www.railscasts.com&#34;&gt;RailsCasts&lt;/a&gt;! I like to setup a project and &amp;ldquo;play along&amp;rdquo; with Ryan Bates and pause/play and work through the examples. With all my experimentation/playing I keep a git repo at &lt;a href=&#34;http://github.com/rubygeek/rubygeek&#34;&gt;http://github.com/rubygeek/rubygeek&lt;/a&gt; where I keep code for reference later. Sometimes when trying to remember if i did something, I grep a keyword or two on the root directory and see if I have done something with it before. I can put notes in the readme file for each project, so I can remember what resources I used.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.railscasts.com/episodes/264-guard&#34;&gt;Guard&lt;/a&gt;
Setups up monitoring for files to run something like tests, compile coffee script or sass. The cast shows how to use it to run your rspec tests. It shows liverefresh, with that and a plugin it will automatically refresh your browser!&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.railscasts.com/episodes/262-trees-with-ancestry&#34;&gt;Ancestory&lt;/a&gt;
I spent a good deal of time using acts_as_commentable_with_threading and although its pretty good, I think now I will change to using this, it seems like it will be more efficent on queries and has more scopes defined.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Creating a Image Gallery in jQuery</title>
      <link>/post/2011-01-23-creating-a-image-gallery-in-jquery/</link>
      <pubDate>Sun, 23 Jan 2011 00:00:00 +0000</pubDate>
      
      <guid>/post/2011-01-23-creating-a-image-gallery-in-jquery/</guid>
      <description>&lt;p&gt;For one of my projects, I wanted to have a link that will open an image gallery in a lightbox. I want thumbnails at the bottom, that would display above the thumbs but larger. I found alot&amp;hellip;alot of them in jquery. I found blogposts that &lt;!-- raw HTML omitted --&gt;review 30&lt;!-- raw HTML omitted --&gt; (and &lt;!-- raw HTML omitted --&gt;and 10&lt;!-- raw HTML omitted --&gt; and &lt;!-- raw HTML omitted --&gt;and 15&lt;!-- raw HTML omitted --&gt; and &lt;!-- raw HTML omitted --&gt;and 14&lt;!-- raw HTML omitted --&gt; and there is more!) of them at a time! So, do I try and modify one.. or .. do I write one myself?&lt;/p&gt;
&lt;p&gt;I was also inspired by &lt;!-- raw HTML omitted --&gt;Garann&lt;!-- raw HTML omitted --&gt; (fellow DevChix) because she decided to write her &lt;!-- raw HTML omitted --&gt;own text editor&lt;!-- raw HTML omitted --&gt; (something I probably wouldn&#39;t attempt&amp;hellip;but she said it was not too bad! so maybe it wouldn&#39;t be that bad after all??)&lt;/p&gt;
&lt;p&gt;So simple interface:&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;Clicking the link will open the gallery, looking like this:&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;</description>
    </item>
    
    <item>
      <title>Koan-A-Copia!</title>
      <link>/post/2011-01-22-koan-a-copia/</link>
      <pubDate>Sat, 22 Jan 2011 00:00:00 +0000</pubDate>
      
      <guid>/post/2011-01-22-koan-a-copia/</guid>
      <description>&lt;p&gt;I first learned about Koans from EdgeCase Ruby Koans project, it was great fun and great practice. Since then, whenever I mentored a DevChix or RailsMentors member I suggest to start doing Koans&amp;hellip; even on a regular basis, once you finish them all &amp;hellip; then start over! I always have a ruby koan mid-way and work on it when I want to practice ruby. Sometimes I try to complete the whole file then run it. Since I’ve been learning Groovy this week, I looked to see if there was Groovy Koans, found those.. then I just started compiling all the languages I know of..&lt;/p&gt;
&lt;h3 id=&#34;ruby&#34;&gt;Ruby&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://www.rubykoans.com&#34;&gt;http://www.rubykoans.com&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;python&#34;&gt;Python&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/gregmalcolm/python_koans&#34;&gt;https://github.com/gregmalcolm/python_koans&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Getting around with GNU Screen</title>
      <link>/post/2010-07-16-getting-around-with-gnu-screen/</link>
      <pubDate>Fri, 16 Jul 2010 00:00:00 +0000</pubDate>
      
      <guid>/post/2010-07-16-getting-around-with-gnu-screen/</guid>
      <description>In past few months, I worked on a project developed entirely on linux. Previously, I mostly did rails development on mac with textmate. I had a brief period of rails and perl where I did vim and screen&amp;hellip;oh maybe 4 years ago. Anyways, so I didn&#39;t forget much vim over the years, but I had forgotten how to use screen. I looked some documentation to refresh my memory and this post is mainly notes for me :)</description>
    </item>
    
    <item>
      <title>Ruby-Debug</title>
      <link>/post/2010-06-22-ruby-debug/</link>
      <pubDate>Tue, 22 Jun 2010 00:00:00 +0000</pubDate>
      
      <guid>/post/2010-06-22-ruby-debug/</guid>
      <description>I never really used a debugger until I did Java. Before that I did what was called &amp;ldquo;PHP Debugging&amp;rdquo; which is littering your code with print statements until you figure out what you need to know, then going back and making sure you deleted them! In php I sometimes would put a unique string like
print &amp;ldquo;QWE&amp;rdquo; . $myawesomevar
Or something like that, then going back and searching your code for QWE (just picked something that was easy to type!</description>
    </item>
    
    <item>
      <title>CSS Frameworks Comparison</title>
      <link>/post/2010-03-24-css-frameworks-comparison/</link>
      <pubDate>Wed, 24 Mar 2010 00:00:00 +0000</pubDate>
      
      <guid>/post/2010-03-24-css-frameworks-comparison/</guid>
      <description>A few weeks ago I set out to compare Blueprint and YUI Grid. I built a page with blueprint. Then built it with YUI2 Grid and then thought about it awhile.
At first I was sold on blueprints CSS. Thats cool, thats tight! It just seemed to be so clever. But when i read the following blog I realized, hey blueprint&#39;s syntax &amp;ldquo;span-4, span-20&amp;rdquo; was putting the implementation into the markup and why is that much different than doing</description>
    </item>
    
    <item>
      <title>Finding Ada - Through DevChix!</title>
      <link>/post/2010-03-24-finding-ada-through-devchix/</link>
      <pubDate>Wed, 24 Mar 2010 00:00:00 +0000</pubDate>
      
      <guid>/post/2010-03-24-finding-ada-through-devchix/</guid>
      <description>For this years Finding Adapost, I would like to highlight several members of DevChix and their contributions and inspirations to the group.
Desi McAdam- One of the co-founders of DevChix. She is always there to put some perspective on things and teach me about diplomacy. Sometimes I get frustrated and speak without thinking things though :)
Susan Potter- Very technical and has very good reasons for why and how she does things.</description>
    </item>
    
    <item>
      <title>Gitting better with Git</title>
      <link>/post/2010-02-17-gitting-better-with-git/</link>
      <pubDate>Wed, 17 Feb 2010 00:00:00 +0000</pubDate>
      
      <guid>/post/2010-02-17-gitting-better-with-git/</guid>
      <description>In the past few weeks I&#39;ve been doing alot of Git and alot more collaboration with people on projects! So I wanted to point out some of the things i&#39;ve learned and some handy tips I picked up.
I was pairing with aimeeremotely and she showed me how to &amp;ldquo;stage&amp;rdquo; a commit. Which is a way to indicate &amp;ldquo;HEY this is going to be committed when you do git commit!&amp;rdquo; I used to always do commit -a which adds all the files not currently in the staging.</description>
    </item>
    
    <item>
      <title>Remote Pair Programming</title>
      <link>/post/2010-02-11-remote-pair-programming/</link>
      <pubDate>Thu, 11 Feb 2010 00:00:00 +0000</pubDate>
      
      <guid>/post/2010-02-11-remote-pair-programming/</guid>
      <description>Seems like Pair Programming is &amp;ldquo;all the rage&amp;rdquo; lately in my circles. I haven&#39;t exactly done it before but after hearing about the success and rapid knowledge growth amongst those that pair program&amp;hellip;I was almost dying to try it! Especially after i saw David Chelimskyand Corey Hainesat WindyCityRailsin Sept 2009. I saw them pair and do BDD with Rspec/Cucumber and it was so fascinating, It was like I was watching a ballet as they hopped from RSpec to Cucumber and back and forth.</description>
    </item>
    
    <item>
      <title>Haml in my Camel</title>
      <link>/post/2009-11-29-haml-in-my-camel/</link>
      <pubDate>Sun, 29 Nov 2009 00:00:00 +0000</pubDate>
      
      <guid>/post/2009-11-29-haml-in-my-camel/</guid>
      <description>Trying something new .. HAML&amp;hellip; I saw it a couple years ago, I was like &amp;ldquo;ehh.. umm.. nah&amp;rdquo; &amp;hellip; But working on the DevChix site, it seems like it will be our choice instead of erb for templates so I thought I&#39;d give it a try.
So here&#39;s some straight up html + erb
&amp;lt;h1&amp;gt;Listing users&amp;lt;/h1&amp;gt; &amp;lt;table&amp;gt; &amp;lt;tr&amp;gt; &amp;lt;th&amp;gt;Username&amp;lt;/th&amp;gt; &amp;lt;th&amp;gt;Email&amp;lt;/th&amp;gt; &amp;lt;/tr&amp;gt; &amp;lt;% @users.each do |user| %&amp;gt; &amp;lt;tr&amp;gt; &amp;lt;td&amp;gt;&amp;lt;%=h user.username %&amp;gt;&amp;lt;/td&amp;gt; &amp;lt;td&amp;gt;&amp;lt;%=h user.</description>
    </item>
    
    <item>
      <title>Builder Pattern in Ruby</title>
      <link>/post/2009-11-24-builder-pattern-in-ruby/</link>
      <pubDate>Tue, 24 Nov 2009 00:00:00 +0000</pubDate>
      
      <guid>/post/2009-11-24-builder-pattern-in-ruby/</guid>
      <description>Call me crazy, but this is why I classify myself as a language geek. When I learn something fascinating, i wonder hmm how can I do that with X language? My last postI did an example of the Builder pattern as described in Effective Java by Joshua Bloch. The main motivation for me to use Builder is to have flexible parameter lists, without worrying about order of parameters (there are a few other reasons outlined in the book, but this is what I find cool).</description>
    </item>
    
    <item>
      <title>Builder Pattern in Java</title>
      <link>/post/2009-11-22-builder-pattern-in-java/</link>
      <pubDate>Sun, 22 Nov 2009 00:00:00 +0000</pubDate>
      
      <guid>/post/2009-11-22-builder-pattern-in-java/</guid>
      <description>I have been reading Effective Java by Joshua Blochand learned something new so I wanted to try it out.
Making long parameter lists in your constructor is not fun and prone to errors. Previously I thought that best way to handle this situation was to make a bunch of setter methods. This can get kind of tedious and hard to follow when there are alot of parameters:
Address myaddress = new Address(&amp;#34;Chicago&amp;#34;, &amp;#34;IL&amp;#34;); myaddress.</description>
    </item>
    
    <item>
      <title>I like Tomatos. I like time.</title>
      <link>/post/2009-09-20-i-like-tomatos-i-like-time/</link>
      <pubDate>Sun, 20 Sep 2009 00:00:00 +0000</pubDate>
      
      <guid>/post/2009-09-20-i-like-tomatos-i-like-time/</guid>
      <description>In my constant battle to get stuff done and feel good about what I did, I am finding the Pomodoro Methodvery handy.
Basically you set a timer for 25 mins, work unhindered for that time, then take a 5 minute break. Repeat 3 more times, then take a 15-20 min break. This has helped me for a few reasons
 If my task is BORING.. I procrastinate, go read facebook, email a friend.</description>
    </item>
    
    <item>
      <title>How to get better at programming?</title>
      <link>/post/2009-09-08-how-to-get-better-at-programming/</link>
      <pubDate>Tue, 08 Sep 2009 00:00:00 +0000</pubDate>
      
      <guid>/post/2009-09-08-how-to-get-better-at-programming/</guid>
      <description>Sometime ago a co-worker asked me what my github name was. I had forgotten..I hadn&#39;t used it in so long! He was surprised that I didn&#39;t have any open source code out there! I said, umm..I haven&#39;t written anything I think someone would want!
I tend to start projects, work a bit on them and leave them. I find something new and exciting. I get busy with school, work, and life.</description>
    </item>
    
    <item>
      <title>Git Peepcode Review</title>
      <link>/post/2008-05-14-git-peepcode-review/</link>
      <pubDate>Wed, 14 May 2008 00:00:00 +0000</pubDate>
      
      <guid>/post/2008-05-14-git-peepcode-review/</guid>
      <description>I&#39;m watching the Git peepcode by Geoffrey Grosenbachand as usual with other peepcode screencasts it is very good. This is the ultimate in geek-tv. I swear, i will burn these to a DVD sometime so i can watch them on my tv! :)
Things I like about git so far:
 branching, since I am often on the road without internet access. clean, just creates one .git dir in your project root.</description>
    </item>
    
    <item>
      <title>Code Review: Rspec Tests</title>
      <link>/post/2008-04-21-code-review-rspec-tests/</link>
      <pubDate>Mon, 21 Apr 2008 00:00:00 +0000</pubDate>
      
      <guid>/post/2008-04-21-code-review-rspec-tests/</guid>
      <description>I am writing a rails application for my mom to enter her bakery orders for her business. The Order page has a form to search or add a new customer, so i can streamline the process as much as possible. In the Order create method, I either get a customer array or a customer ID.
Here&#39;s the order create method in the controller:
def create new_customer = params[:order][:customer_id].blank? ? true : false if new_customer @customer = Customer.</description>
    </item>
    
    <item>
      <title>Weirdness and Coolness in Rails</title>
      <link>/post/2007-07-27-weirdness-and-coolness-in-rails/</link>
      <pubDate>Fri, 27 Jul 2007 00:00:00 +0000</pubDate>
      
      <guid>/post/2007-07-27-weirdness-and-coolness-in-rails/</guid>
      <description>Coolness First the cool thing&amp;hellip; and I think I have a good reason for this&amp;hellip; I have a model that is not tied to any particular table, but is a summary table for about 8 tables. Rather than cluttering up my controller with a bunch of stuff, I am putting into a model (keeping REST in mind). I could have put it in the lib dir as a module.. but.. I thought i&#39;d try it in the models dir, so i don&#39;t have to require it etc.</description>
    </item>
    
    <item>
      <title>Right Tool for the Right Job</title>
      <link>/post/2007-04-12-right-tool-for-the-right-job/</link>
      <pubDate>Thu, 12 Apr 2007 00:00:00 +0000</pubDate>
      
      <guid>/post/2007-04-12-right-tool-for-the-right-job/</guid>
      <description>On one of my projects the requirements was to take two csv files, one with words and data and one with words. The goal is to use the list of words to retrieve the data from the other. Long-term storage for the datasets is not needed, so I didn&#39;t see a reason to put in a database. Typically the language used for this company is PHP (though I have sneaked in a few ruby scripts.</description>
    </item>
    
    <item>
      <title>Compiling Ruby 1.8.5 on Ubuntu or I&#39;m not afraid of make</title>
      <link>/post/2007-02-09-compiling-ruby-1-dot-8-5-on-ubuntu-or-im-not-afraid-of-make/</link>
      <pubDate>Fri, 09 Feb 2007 00:00:00 +0000</pubDate>
      
      <guid>/post/2007-02-09-compiling-ruby-1-dot-8-5-on-ubuntu-or-im-not-afraid-of-make/</guid>
      <description>If there is one thing I learned from perl &amp;ndash; is not to be afraid of make! I installed countless perl modules&amp;hellip; and when I first started using Linux heavily, I had to compile some apps! Yikes. But not afraid no more&amp;hellip;
I go to the RubyOnRails.com download page to see what the latest version of Ruby is, so I can install it on my Ubuntu VM (downloaded from vmware list of virtual appliances, and running with VMWare player).</description>
    </item>
    
    <item>
      <title>Towel Day</title>
      <link>/post/2006-05-23-towel-day/</link>
      <pubDate>Tue, 23 May 2006 00:00:00 +0000</pubDate>
      
      <guid>/post/2006-05-23-towel-day/</guid>
      <description>What do I do?
Carry your towel with you throughout the day to show your participation and mourning.
When do I do it?
May 25th.
Where do I do it?
Everywhere.
Why a towel?
A towel, it says, is about the most massively useful thing an interstellar hitch hiker can have. Partly it has great practical value - you can wrap it around you for warmth as you bound across the cold moons of Jaglan Beta; you can lie on it on the brilliant marble-sanded beaches of Santraginus V, inhaling the heady sea vapours; you can sleep under it beneath the stars which shine so redly on the desert world of Kakrafoon; use it to sail a mini raft down the slow heavy river Moth; wet it for use in hand-to-hand-combat; wrap it round your head to ward off noxious fumes or to avoid the gaze of the Ravenous Bugblatter Beast of Traal (a mindboggingly stupid animal, it assumes that if you can&#39;t see it, it can&#39;t see you - daft as a bush, but very ravenous); you can wave your towel in emergencies as a distress signal, and of course dry yourself off with it if it still seems to be clean enough.</description>
    </item>
    
    <item>
      <title>Never a dull moment</title>
      <link>/post/2006-04-15-never-a-dull-moment/</link>
      <pubDate>Sat, 15 Apr 2006 00:00:00 +0000</pubDate>
      
      <guid>/post/2006-04-15-never-a-dull-moment/</guid>
      <description>First of all, thanks to some howtos at http://wiki.ubuntu.com I was able to get my video drivers setup. Now I&#39;m basking in 1680x1050 glory. I can have windows side by side &amp;ndash; almost&amp;hellip; i usually shrink the window a bit. Very nice. People have asked me about my laptop, I got it from PowerNotebooks, this model.At the recent group meetings I&#39;ve been at, people go &amp;ldquo;Wow .. thats some laptop!&amp;quot;. In fact on the train ride to the perl meeting, Josh McAdamswhips out his cute little 12 inch mac, brian d foyhis mid sized mac.</description>
    </item>
    
    <item>
      <title>Response to Test Freak!</title>
      <link>/post/2006-01-26-response-to-test-freak/</link>
      <pubDate>Thu, 26 Jan 2006 00:00:00 +0000</pubDate>
      
      <guid>/post/2006-01-26-response-to-test-freak/</guid>
      <description>Note: this post was originally on my &amp;ldquo;PhpGirl&amp;rdquo; blog
Update: Chris Shiflett posted an informative responseon Test-More for PHP and testing in general
I started responding to the comment to my last post, then realized it was going to be long. So I put it in a post.
Thanks Damien Gilles, I have looked at that. Problem is, I have some resistance at work to using outside code. So I would need to work up a case for it beforehand and analyize it.</description>
    </item>
    
    <item>
      <title>Test Freak!</title>
      <link>/post/2006-01-25-test-freak/</link>
      <pubDate>Wed, 25 Jan 2006 00:00:00 +0000</pubDate>
      
      <guid>/post/2006-01-25-test-freak/</guid>
      <description>Note: this post was originally on my &amp;ldquo;PhpGirl&amp;rdquo; blog
My two loyal readers know I like testing. Some say I&#39;m sick.
I&#39;m writing a PHP class for a user, and then think.. oh gee, how do I know if this works?? oh I&#39;ll write a Test::Simple for PHP. Yes, I know there exists one already that uses the power of Perl to test PHP files, but I didn&#39;t have time to figure out how to set that up and probably won&#39;t be able to use perl anyways on the production system.</description>
    </item>
    
  </channel>
</rss>